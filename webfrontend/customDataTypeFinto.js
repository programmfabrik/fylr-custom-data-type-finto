// Generated by CoffeeScript 1.12.8
var CustomDataTypeCommonFacet, CustomDataTypeWithCommons,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CustomDataTypeWithCommons = (function(superClass) {
  extend(CustomDataTypeWithCommons, superClass);

  function CustomDataTypeWithCommons() {
    this.getQueryFieldBadge = bind(this.getQueryFieldBadge, this);
    return CustomDataTypeWithCommons.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeWithCommons.prototype.initData = function(data) {
    var cdata;
    if (!data[this.name()]) {
      cdata = {};
      data[this.name()] = cdata;
    } else {
      cdata = data[this.name()];
    }
    if (!cdata.url) {
      cdata.url = "";
    }
    return cdata;
  };

  CustomDataTypeWithCommons.prototype.renderFieldAsGroup = function() {
    return false;
  };

  CustomDataTypeWithCommons.prototype.renderRowAsBlock = function(data, top_level_data, opts) {
    return false;
  };

  CustomDataTypeWithCommons.prototype.getQueryFieldBadge = function(data) {
    var value;
    if (data[(this.name()) + ":unset"]) {
      value = $$("text.column.badge.without");
    } else {
      value = data[this.name()];
    }
    return {
      name: this.nameLocalized(),
      value: value
    };
  };

  CustomDataTypeWithCommons.prototype.supportsStandard = function() {
    return true;
  };

  CustomDataTypeWithCommons.prototype.supportsPrinting = function() {
    return true;
  };

  CustomDataTypeWithCommons.prototype.supportsFacet = function() {
    return true;
  };

  CustomDataTypeWithCommons.prototype.getFacet = function(opts) {
    opts.field = this;
    return new CustomDataTypeCommonFacet(opts);
  };

  CustomDataTypeWithCommons.prototype.getSortFunction = function() {
    return (function(_this) {
      return function(a, b) {
        var ref, ref1;
        return CUI.util.compareIndex(((ref = a[_this.name()]) != null ? ref.conceptName : void 0) || 'zzz', ((ref1 = b[_this.name()]) != null ? ref1.conceptName : void 0) || 'zzz');
      };
    })(this);
  };

  CustomDataTypeWithCommons.prototype.hasRenderForSort = function() {
    return true;
  };

  CustomDataTypeWithCommons.prototype.sortExtraOpts = function() {
    return [
      {
        text: "conceptName",
        value: "conceptName"
      }, {
        text: "conceptURI",
        value: "conceptURI"
      }
    ];
  };

  CustomDataTypeWithCommons.prototype.renderSearchInput = function(data, opts) {
    var search_token;
    if (opts == null) {
      opts = {};
    }
    return search_token = new SearchToken({
      column: this,
      data: data,
      fields: opts.fields
    }).getInput().DOM;
  };

  CustomDataTypeWithCommons.prototype.getFieldNamesForSearch = function() {
    return this.getFieldNames();
  };

  CustomDataTypeWithCommons.prototype.getFieldNamesForSuggest = function() {
    return this.getFieldNames();
  };

  CustomDataTypeWithCommons.prototype.getFieldNames = function() {
    var field_names;
    field_names = [this.fullName() + ".conceptURI", this.fullName() + ".conceptName"];
    return field_names;
  };

  CustomDataTypeWithCommons.prototype.getSearchFilter = function(data, key) {
    var filter, phrase, ref, str, val;
    if (key == null) {
      key = this.name();
    }
    if (data[key + ":unset"]) {
      filter = {
        type: "in",
        fields: [this.fullName() + ".conceptName"],
        "in": [null]
      };
      filter._unnest = true;
      filter._unset_filter = true;
      return filter;
    }
    filter = CustomDataTypeWithCommons.__super__.getSearchFilter.call(this, data, key);
    if (filter) {
      return filter;
    }
    if (CUI.util.isEmpty(data[key])) {
      return;
    }
    val = data[key];
    ref = Search.getPhrase(val), str = ref[0], phrase = ref[1];
    switch (data[key + ":type"]) {
      case "token":
      case "fulltext":
      case void 0:
        filter = {
          type: "match",
          mode: data[key + ":mode"],
          fields: this.getFieldNamesForSearch(),
          string: str,
          phrase: phrase
        };
        break;
      case "field":
        filter = {
          type: "in",
          fields: this.getFieldNamesForSearch(),
          "in": [str]
        };
    }
    return filter;
  };

  CustomDataTypeWithCommons.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var name;
    name = this.name();
    if (!data[name]) {
      data[name] = {
        conceptName: '',
        conceptURI: ''
      };
    }
    return this.__renderEditorInputPopover(data, data[name], opts);
  };

  CustomDataTypeWithCommons.prototype.__renderEditorInputPopover = function(data, cdata, opts) {
    var classNameForBurgerMenuButton, layout, that;
    if (opts == null) {
      opts = {};
    }
    that = this;
    layout;
    classNameForBurgerMenuButton = 'pluginDirectSelectEditSearch';
    if (ez5.version("6")) {
      classNameForBurgerMenuButton = 'pluginDirectSelectEditSearchFylr';
    } else if (ez5.version("5")) {
      classNameForBurgerMenuButton = 'pluginDirectSelectEditSearch';
    }
    layout = new CUI.HorizontalLayout({
      "class": 'customPluginEditorLayout',
      center: {
        "class": ''
      },
      right: {
        content: new CUI.Buttonbar({
          buttons: [
            new CUI.Button({
              text: '',
              icon: new CUI.Icon({
                "class": "fa-ellipsis-v"
              }),
              "class": classNameForBurgerMenuButton,
              onClick: (function(_this) {
                return function(e, dotsButton) {
                  var deleteClear, detailinfo, dotsButtonMenu, itemList, menu_items, uriCall;
                  dotsButtonMenu = new CUI.Menu({
                    "class": "customDataTypeCommonsMenu",
                    element: dotsButton
                  }, menu_items = [
                    {
                      text: $$('custom.data.type.commons.controls.search.label'),
                      value: 'search',
                      icon_left: new CUI.Icon({
                        "class": "fa-search"
                      }),
                      onClick: function(e2, btn2) {
                        that.showEditPopover(dotsButton, data, cdata, layout, opts);
                        return dotsButtonMenu.hide();
                      }
                    }
                  ], typeof that.__getAdditionalTooltipInfo === "function" ? (detailinfo = {
                    text: $$('custom.data.type.commons.controls.detailinfo.label'),
                    value: 'detail',
                    icon_left: new CUI.Icon({
                      "class": "fa-info-circle"
                    }),
                    disabled: that.isEmpty(data, 0, 0),
                    onClick: function(eDetailInfo, btnDetailInfo) {
                      var tooltip;
                      tooltip = new CUI.Tooltip({
                        element: btnDetailInfo,
                        placement: 'w',
                        markdown: true,
                        show_ms: 1000,
                        hide_ms: 200,
                        content: function(tooltip) {
                          var encodedURI, extendedInfo_xhr;
                          if (!that.isEmpty(data, 0, 0)) {
                            encodedURI = encodeURIComponent(cdata.conceptURI);
                            extendedInfo_xhr = {
                              "xhr": void 0
                            };
                            that.__getAdditionalTooltipInfo(encodedURI, tooltip, extendedInfo_xhr);
                            return new CUI.Label({
                              icon: "spinner",
                              text: $$('custom.data.type.commons.modal.form.popup.loadingstring')
                            });
                          }
                        }
                      });
                      tooltip.show();
                      return CUI.Events.listen({
                        type: ["click", "dblclick", "mouseout"],
                        capture: true,
                        node: btnDetailInfo,
                        only_once: true,
                        call: (function(_this) {
                          return function(ev) {
                            return dotsButtonMenu.hide();
                          };
                        })(this)
                      });
                    }
                  }, menu_items.push(detailinfo)) : void 0, uriCall = {
                    text: $$('custom.data.type.commons.controls.calluri.label'),
                    value: 'uri',
                    icon_left: new CUI.Icon({
                      "class": "fa-external-link"
                    }),
                    disabled: that.isEmpty(data, 0, 0) || !CUI.parseLocation(cdata.conceptURI),
                    onClick: function() {
                      window.open(cdata.conceptURI, "_blank");
                      return dotsButtonMenu.hide();
                    }
                  }, menu_items.push(uriCall), deleteClear = {
                    text: $$('custom.data.type.commons.controls.delete.label'),
                    value: 'delete',
                    name: 'deleteValueFromDANTEPlugin',
                    "class": 'deleteValueFromDANTEPlugin',
                    icon_left: new CUI.Icon({
                      "class": "fa-trash"
                    }),
                    disabled: that.isEmpty(data, 0, 0),
                    onClick: function() {
                      cdata = {
                        conceptName: '',
                        conceptURI: ''
                      };
                      data[that.name()] = cdata;
                      that.__updateResult(cdata, layout, opts);
                      return dotsButtonMenu.hide();
                    }
                  }, menu_items.push(deleteClear), itemList = {
                    items: menu_items
                  });
                  dotsButtonMenu._auto_close_after_click = false;
                  dotsButtonMenu.setItemList(itemList);
                  return dotsButtonMenu.show();
                };
              })(this)
            })
          ]
        })
      }
    });
    CUI.Events.registerEvent({
      type: "custom-deleteDataFromPlugin",
      bubble: false
    });
    CUI.Events.listen({
      type: "custom-deleteDataFromPlugin",
      instance: that,
      node: layout,
      call: (function(_this) {
        return function() {
          cdata = {};
          data[that.name()] = cdata;
          opts.deleteDataFromPlugin = true;
          return that.__updateResult(cdata, layout, opts);
        };
      })(this)
    });
    this.__updateResult(cdata, layout, opts);
    return layout;
  };

  CustomDataTypeWithCommons.prototype.showEditPopover = function(btn, data, cdata, layout, opts) {
    var cdata_form, searchsuggest_xhr, suggest_Menu, that;
    that = this;
    suggest_Menu;
    searchsuggest_xhr = {
      "xhr": void 0
    };
    cdata.countOfSuggestions = 50;
    cdata_form = new CUI.Form({
      "class": 'cdtFormWithPadding',
      data: cdata,
      fields: that.__getEditorFields(cdata),
      onDataChanged: (function(_this) {
        return function(data, elem) {
          _this.__updateResult(cdata, layout, opts);
          _this.__setEditorFieldStatus(cdata, layout);
          return _this.__updateSuggestionsMenu(cdata, cdata_form, data.searchbarInput, elem, suggest_Menu, searchsuggest_xhr, layout, opts);
        };
      })(this)
    }).start();
    suggest_Menu = new CUI.Menu({
      element: cdata_form.getFieldsByName("searchbarInput")[0],
      use_element_width_as_min_width: true,
      "class": "customDataTypeCommonsMenu"
    });
    return this.popover = new CUI.Popover({
      element: btn,
      placement: "wn",
      "class": "commonPlugin_Popover",
      pane: {
        header_left: new CUI.Label({
          text: $$('custom.data.type.commons.popover.choose.label')
        }),
        content: cdata_form
      }
    }).show();
  };

  CustomDataTypeWithCommons.prototype.isEmpty = function(data, top_level_data, opts) {
    var ref, ref1;
    if (opts == null) {
      opts = {};
    }
    if ((opts != null ? opts.mode : void 0) === "expert") {
      if (typeof data[this.name()] === 'object') {
        return CUI.util.isEmpty(data[this.name()] != null);
      } else {
        return CUI.util.isEmpty((ref = data[this.name()]) != null ? ref.trim() : void 0);
      }
    }
    return !((ref1 = data[this.name()]) != null ? ref1.conceptName : void 0);
  };

  CustomDataTypeWithCommons.prototype.getSaveData = function(data, save_data, opts) {
    var cdata, conceptFulltext, conceptNameChosenByHand, conceptStandard, frontendLanguage, frontendLanguages, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, that;
    that = this;
    if (opts.demo_data) {
      return {
        conceptName: 'Example',
        conceptURI: 'https://example.com'
      };
    }
    cdata = data[this.name()] || ((ref = data._template) != null ? ref[this.name()] : void 0);
    switch (this.getDataStatus(cdata)) {
      case "invalid":
        if (opts.copy) {
          return save_data[this.name()] = null;
        } else {
          throw new InvalidSaveDataException();
        }
        break;
      case "empty":
        return save_data[this.name()] = null;
      case "ok":
        conceptFulltext = {};
        if (cdata != null ? cdata._fulltext : void 0) {
          if ((ref1 = cdata._fulltext) != null ? ref1.string : void 0) {
            if (((ref2 = cdata._fulltext) != null ? ref2.string : void 0) !== '') {
              conceptFulltext.string = cdata._fulltext.string;
            }
          }
          if ((ref3 = cdata._fulltext) != null ? ref3.l10ntext : void 0) {
            if (cdata._fulltext.l10ntext) {
              conceptFulltext.l10ntext = cdata._fulltext.l10ntext;
            }
          }
          if ((ref4 = cdata._fulltext) != null ? ref4.text : void 0) {
            if (cdata._fulltext.text) {
              conceptFulltext.text = cdata._fulltext.text;
            }
          }
        } else {
          conceptFulltext.text = cdata.conceptName.trim();
        }
        conceptStandard = {};
        if (cdata != null ? cdata._standard : void 0) {
          if ((ref5 = cdata._standard) != null ? ref5.l10ntext : void 0) {
            if (cdata._standard.l10ntext) {
              conceptStandard.l10ntext = cdata._standard.l10ntext;
            }
          } else {
            if ((ref6 = cdata._standard) != null ? ref6.text : void 0) {
              if (((ref7 = cdata._standard) != null ? ref7.text : void 0) !== '') {
                conceptStandard.text = cdata._standard.text;
              }
            }
          }
        }
        frontendLanguages = ez5.loca.getLanguage();
        frontendLanguages = frontendLanguages.split('-');
        frontendLanguage = frontendLanguages[0];
        conceptNameChosenByHand = false;
        if (cdata != null ? cdata.conceptNameChosenByHand : void 0) {
          if (cdata.conceptNameChosenByHand === true) {
            conceptNameChosenByHand = true;
          }
        }
        save_data[this.name()] = {
          conceptName: cdata.conceptName.trim(),
          conceptURI: cdata.conceptURI.trim(),
          frontendLanguage: frontendLanguage,
          _fulltext: conceptFulltext,
          _standard: conceptStandard
        };
        if (cdata != null ? cdata.conceptAncestors : void 0) {
          if (cdata.conceptAncestors.length > 0) {
            if (Array.isArray(cdata.conceptAncestors)) {
              cdata.conceptAncestors = cdata.conceptAncestors.join(' ');
            }
            save_data[this.name()]['conceptAncestors'] = cdata.conceptAncestors;
          }
        }
        if (cdata != null ? cdata.conceptSource : void 0) {
          if (typeof cdata.conceptSource === 'string') {
            if (cdata.conceptSource.length > 0) {
              save_data[this.name()]['conceptSource'] = cdata.conceptSource;
            }
          }
        }
        if (cdata != null ? cdata.conceptNameChosenByHand : void 0) {
          if (cdata.conceptNameChosenByHand === true) {
            save_data[this.name()]['conceptNameChosenByHand'] = true;
          }
        }
        if (cdata != null ? cdata.facetTerm : void 0) {
          return save_data[this.name()]['facetTerm'] = cdata.facetTerm;
        }
    }
  };

  CustomDataTypeWithCommons.prototype.__updateResult = function(cdata, layout, opts) {
    var displayURI, info, inputX, options, searchsuggest_xhr, suggest_Menu_directInput, that;
    that = this;
    if (opts.data) {
      opts.data[that.name(opts)] = cdata;
    }
    if (cdata != null ? cdata.conceptURI : void 0) {
      displayURI = cdata.conceptURI;
      if (displayURI.length > 20) {
        displayURI = displayURI.replace('http://', '');
        displayURI = displayURI.replace('https://', '');
      }
      if (displayURI.length > 30) {
        displayURI = displayURI.replace('uri.gbv.de/terminology/', '…/');
      }
      info = new CUI.VerticalLayout({
        "class": 'ez5-info_commonPlugin',
        top: {
          content: new CUI.Label({
            text: cdata.conceptName,
            multiline: true
          })
        },
        bottom: {
          content: new CUI.Button({
            name: "outputButtonHref",
            appearance: "flat",
            size: "normal",
            text: displayURI,
            tooltip: {
              markdown: true,
              placement: 'w',
              content: function(tooltip) {
                var encodedURI, extendedInfo_xhr;
                encodedURI = encodeURIComponent(cdata.conceptURI);
                extendedInfo_xhr = {
                  "xhr": void 0
                };
                if (typeof that.__getAdditionalTooltipInfo === "function") {
                  that.__getAdditionalTooltipInfo(encodedURI, tooltip, extendedInfo_xhr);
                  return new CUI.Label({
                    icon: "spinner",
                    text: $$('custom.data.type.commons.modal.form.popup.loadingstring')
                  });
                }
              }
            },
            onClick: (function(_this) {
              return function(evt, button) {
                return window.open(cdata.conceptURI, "_blank");
              };
            })(this)
          })
        }
      });
      layout.replace(info, 'center');
      layout.addClass('ez5-linked-object-edit');
      options = {
        "class": 'ez5-linked-object-container'
      };
      layout.__initPane(options, 'center');
    }
    if (!(cdata != null ? cdata.conceptURI : void 0)) {
      suggest_Menu_directInput;
      inputX = new CUI.Input({
        "class": "pluginDirectSelectEditInput",
        undo_and_changed_support: false,
        name: "directSelectInput",
        content_size: false,
        onKeyup: (function(_this) {
          return function(input) {
            var searchstring;
            searchstring = input.getValueForInput();
            if (typeof that.__updateSuggestionsMenu === "function") {
              return _this.__updateSuggestionsMenu(cdata, 0, searchstring, input, suggest_Menu_directInput, searchsuggest_xhr, layout, opts);
            }
          };
        })(this)
      });
      if (!(opts != null ? opts.callfrompoolmanager : void 0)) {
        inputX.render();
      }
      suggest_Menu_directInput = new CUI.Menu({
        element: inputX,
        use_element_width_as_min_width: true,
        "class": "customDataTypeCommonsMenu"
      });
      searchsuggest_xhr = {
        "xhr": void 0
      };
      layout.replace(inputX, 'center');
      layout.removeClass('ez5-linked-object-edit');
      options = {
        "class": ''
      };
      layout.__initPane(options, 'center');
    }
    if (!opts.deleteDataFromPlugin) {
      return that.__setEditorFieldStatus(cdata, layout);
    }
  };

  CustomDataTypeWithCommons.prototype.__setEditorFieldStatus = function(cdata, element) {
    switch (this.getDataStatus(cdata)) {
      case "invalid":
        element.addClass("cui-input-invalid");
        break;
      default:
        element.removeClass("cui-input-invalid");
    }
    CUI.Events.trigger({
      node: element,
      type: "editor-changed"
    });
    CUI.Events.trigger({
      node: element,
      type: "data-changed"
    });
    return this;
  };

  CustomDataTypeWithCommons.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    return this.__renderButtonByData(data[this.name()]);
  };

  CustomDataTypeWithCommons.prototype.getDataStatus = function(cdata) {
    var nameCheck, uriCheck;
    if (cdata) {
      if (cdata.conceptURI && cdata.conceptName) {
        uriCheck = CUI.parseLocation(cdata.conceptURI);
        nameCheck = cdata.conceptName ? cdata.conceptName.trim() : void 0;
        if (uriCheck && nameCheck) {
          return "ok";
        }
        if (cdata.conceptURI.trim() === '' && cdata.conceptName.trim() === '') {
          return "empty";
        }
        return "invalid";
      }
    }
    return "empty";
  };

  return CustomDataTypeWithCommons;

})(CustomDataType);

CustomDataTypeCommonFacet = (function(superClass) {
  extend(CustomDataTypeCommonFacet, superClass);

  function CustomDataTypeCommonFacet() {
    return CustomDataTypeCommonFacet.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeCommonFacet.prototype.initOpts = function() {
    CustomDataTypeCommonFacet.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        mandatory: true,
        check: Field
      }
    });
  };

  CustomDataTypeCommonFacet.prototype.requestFacetWithLimit = function(obj) {
    return {
      limit: this.getLimit(),
      field: this._field.fullName() + ".conceptName",
      sort: "count",
      type: "term"
    };
  };

  CustomDataTypeCommonFacet.prototype.getObjects = function(key, data) {
    var ref;
    if (key == null) {
      key = this.name();
    }
    if (data == null) {
      data = this.data();
    }
    return ((ref = data[key]) != null ? ref.terms : void 0) || [];
  };

  CustomDataTypeCommonFacet.prototype.renderObjectText = function(object) {
    return object.term;
  };

  CustomDataTypeCommonFacet.prototype.getObjectPath = function(obj) {
    return [obj.term];
  };

  CustomDataTypeCommonFacet.prototype.name = function() {
    return this._field.fullName() + ".conceptName";
  };

  CustomDataTypeCommonFacet.prototype.requestSearchFilter = function(obj) {
    return {
      bool: "must",
      fields: [this._field.fullName() + ".conceptName"],
      type: "in",
      "in": [obj.term]
    };
  };

  return CustomDataTypeCommonFacet;

})(FieldFacet);
// Generated by CoffeeScript 1.12.8
var FINTOUtilities;

FINTOUtilities = (function() {
  function FINTOUtilities() {}

  FINTOUtilities.getFullTextFromJSONObject = function(object, databaseLanguages) {
    var _fulltext, arrayValue, fullTextString, i, j, k, key, l10nObject, l10nObjectKey, l10nObjectValue, l10nObjectWithShortenedLanguages, l10nObjectWithShortenedLanguagesKey, l10nObjectWithShortenedLanguagesValue, language, len, len1, len2, objectKeys, propertyType, shortenedDatabaseLanguages, shortenedLanguage, value;
    if (databaseLanguages == null) {
      databaseLanguages = false;
    }
    shortenedDatabaseLanguages = databaseLanguages.map(function(value, key, array) {
      return value.split('-').shift();
    });
    _fulltext = {};
    fullTextString = '';
    l10nObject = {};
    l10nObjectWithShortenedLanguages = {};
    for (i = 0, len = databaseLanguages.length; i < len; i++) {
      language = databaseLanguages[i];
      l10nObject[language] = '';
    }
    for (j = 0, len1 = shortenedDatabaseLanguages.length; j < len1; j++) {
      language = shortenedDatabaseLanguages[j];
      l10nObjectWithShortenedLanguages[language] = '';
    }
    objectKeys = ['prefLabel', 'altLabel', 'hiddenLabel', 'uri', 'skos:scopeNote', 'skos:definition', 'skos:example', 'skos:historyNote', 'skos:note', 'skos:changeNote'];
    for (key in object) {
      value = object[key];
      if (objectKeys.includes(key)) {
        propertyType = typeof value;
        if (propertyType === 'string') {
          fullTextString += value + ' ';
          for (l10nObjectWithShortenedLanguagesKey in l10nObjectWithShortenedLanguages) {
            l10nObjectWithShortenedLanguagesValue = l10nObjectWithShortenedLanguages[l10nObjectWithShortenedLanguagesKey];
            l10nObjectWithShortenedLanguages[l10nObjectWithShortenedLanguagesKey] = l10nObjectWithShortenedLanguagesValue + value + ' ';
          }
        }
        if (propertyType === 'object') {
          if (!Array.isArray(value)) {
            value = [value];
          }
          for (k = 0, len2 = value.length; k < len2; k++) {
            arrayValue = value[k];
            if (typeof arrayValue === 'object') {
              if (l10nObjectWithShortenedLanguages.hasOwnProperty(arrayValue.lang)) {
                l10nObjectWithShortenedLanguages[arrayValue.lang] += arrayValue.value + ' ';
              }
              fullTextString += arrayValue.value + ' ';
            }
          }
        }
      }
    }
    for (l10nObjectKey in l10nObject) {
      l10nObjectValue = l10nObject[l10nObjectKey];
      shortenedLanguage = l10nObjectKey.split('-')[0];
      if (l10nObjectWithShortenedLanguages[shortenedLanguage]) {
        l10nObject[l10nObjectKey] = l10nObjectWithShortenedLanguages[shortenedLanguage];
      }
    }
    _fulltext.text = fullTextString;
    _fulltext.l10ntext = l10nObject;
    return _fulltext;
  };

  FINTOUtilities.getStandardFromJSONObject = function(json, databaseLanguages) {
    var _standard, hasl10n, i, l10nObject, l10nObjectKey, l10nObjectValue, language, len, prefLabelKey, prefLabelValue, ref, shortenedDatabaseLanguages, shortenedLanguage;
    if (databaseLanguages == null) {
      databaseLanguages = false;
    }
    shortenedDatabaseLanguages = databaseLanguages.map(function(value, key, array) {
      return value.split('-').shift();
    });
    _standard = {};
    l10nObject = {};
    for (i = 0, len = databaseLanguages.length; i < len; i++) {
      language = databaseLanguages[i];
      l10nObject[language] = '';
    }
    hasl10n = false;
    if (!Array.isArray(json.prefLabel)) {
      json.prefLabel = [json.prefLabel];
    }
    for (l10nObjectKey in l10nObject) {
      l10nObjectValue = l10nObject[l10nObjectKey];
      shortenedLanguage = l10nObjectKey.split('-')[0];
      if (json.prefLabel.length > 0) {
        ref = json.prefLabel;
        for (prefLabelKey in ref) {
          prefLabelValue = ref[prefLabelKey];
          if (prefLabelValue.lang === shortenedLanguage) {
            l10nObject[l10nObjectKey] = prefLabelValue.value;
            hasl10n = true;
          }
        }
      }
    }
    if (hasl10n) {
      for (l10nObjectKey in l10nObject) {
        l10nObjectValue = l10nObject[l10nObjectKey];
        if (l10nObject[l10nObjectKey] === '') {
          l10nObject[l10nObjectKey] = json.prefLabel[Object.keys(json.prefLabel)[0]].value;
        }
      }
    }
    _standard.l10ntext = l10nObject;
    return _standard;
  };

  FINTOUtilities.getFacetTermFromJSONObject = function(json, databaseLanguages) {
    var _facet_term, hasl10n, i, l10nObject, l10nObjectKey, l10nObjectValue, language, len, prefLabelKey, prefLabelValue, ref, shortenedDatabaseLanguages, shortenedLanguage;
    shortenedDatabaseLanguages = databaseLanguages.map(function(value, key, array) {
      return value.split('-').shift();
    });
    _facet_term = {};
    l10nObject = {};
    for (i = 0, len = databaseLanguages.length; i < len; i++) {
      language = databaseLanguages[i];
      l10nObject[language] = '';
    }
    hasl10n = false;
    if (!Array.isArray(json.prefLabel)) {
      json.prefLabel = [json.prefLabel];
    }
    for (l10nObjectKey in l10nObject) {
      l10nObjectValue = l10nObject[l10nObjectKey];
      shortenedLanguage = l10nObjectKey.split('-')[0];
      ref = json.prefLabel;
      for (prefLabelKey in ref) {
        prefLabelValue = ref[prefLabelKey];
        if (prefLabelValue.lang === shortenedLanguage) {
          l10nObject[l10nObjectKey] = prefLabelValue.value;
          hasl10n = true;
        }
      }
    }
    if (hasl10n) {
      for (l10nObjectKey in l10nObject) {
        l10nObjectValue = l10nObject[l10nObjectKey];
        if (l10nObject[l10nObjectKey] === '') {
          l10nObject[l10nObjectKey] = json.prefLabel[Object.keys(json.prefLabel)[0]].value;
        }
        l10nObject[l10nObjectKey] = l10nObject[l10nObjectKey] + '@$@' + json.uri;
      }
    }
    _facet_term = l10nObject;
    return _facet_term;
  };

  FINTOUtilities.getJSONPreview = function(data, uri, desiredLanguage, frontendLanguages) {
    var altLabels, definition, hiddenLabels, html, key, note, prefLabel, prefLabels, record, ref, ref1, ref2, ref3, ref4, ref5, scopeNote, that, val, value;
    that = this;
    html = '';
    data = data.graph;
    for (key in data) {
      record = data[key];
      if (record.uri === uri) {
        prefLabel = $$('custom.data.type.finto.modal.form.popup.jsonpreview.nopreflabel');
        if (record != null ? record.prefLabel : void 0) {
          prefLabel = that.getPrefLabelFromDataResult(record, desiredLanguage, frontendLanguages);
        }
        html += '<div style="font-size: 12px; color: #999;"><span class="cui-label-icon"><i class="fa  fa-external-link"></i></span>&nbsp;' + record.uri + '</div>';
        html += '<h3><span class="cui-label-icon"><i class="fa  fa-info-circle"></i></span>&nbsp;' + prefLabel + '</h3>';
        prefLabels = '';
        if (record != null ? record.prefLabel : void 0) {
          if (Array.isArray(record.prefLabel)) {
            ref = record.prefLabel;
            for (key in ref) {
              val = ref[key];
              if (val.value !== prefLabel) {
                prefLabels = ' - ' + val.value + ' (' + val.lang + ')<br />' + prefLabels;
              }
            }
          }
        }
        if (prefLabels) {
          html += '<h4>' + $$('custom.data.type.finto.modal.form.popup.jsonpreview.terms') + '</h4>' + prefLabels;
        }
        altLabels = '';
        if (record.altLabel) {
          if (Array.isArray(record.altLabel)) {
            ref1 = record.altLabel;
            for (key in ref1) {
              val = ref1[key];
              altLabels = ' - ' + val.value + ' (' + val.lang + ')<br />' + altLabels;
            }
          } else if (record.altLabel instanceof Object) {
            altLabels = ' - ' + record.altLabel.value + ' (' + record.altLabel.lang + ')<br />' + altLabels;
          }
        }
        if (altLabels) {
          html += '<h4>' + $$('custom.data.type.finto.modal.form.popup.jsonpreview.altterms') + '</h4>' + altLabels;
        }
        hiddenLabels = '';
        if (record.hiddenLabel) {
          if (Array.isArray(record.altLabel)) {
            ref2 = record.hiddenLabel;
            for (key in ref2) {
              val = ref2[key];
              hiddenLabels = ' - ' + val.value + ' (' + val.lang + ')<br />' + altLabels;
            }
          }
        }
        if (hiddenLabels.length > 0) {
          html += '<h4>' + $$('custom.data.type.finto.modal.form.popup.jsonpreview.hiddenterms') + '</h4>' + hiddenLabels;
        }
        definition = '';
        if (record['skos:definition']) {
          if (!Array.isArray(record['skos:definition'])) {
            if (record['skos:definition'].value) {
              definition += record['skos:definition'].value + '<br />';
            }
          }
          if (Array.isArray(record['skos:definition'])) {
            ref3 = record['skos:definition'];
            for (key in ref3) {
              value = ref3[key];
              if (value.lang === desiredLanguage) {
                definition += value.value + '<br />';
              }
            }
          }
          if (definition) {
            html += '<h4>' + $$('custom.data.type.finto.modal.form.popup.jsonpreview.definition') + '</h4>' + definition;
          }
        }
        scopeNote = '';
        if (record['skos:scopeNote']) {
          if (!Array.isArray(record['skos:scopeNote'])) {
            if (record['skos:scopeNote'].value) {
              scopeNote += record['skos:scopeNote'].value + '<br />';
            }
          }
          if (Array.isArray(record['skos:scopeNote'])) {
            ref4 = record['skos:scopeNote'];
            for (key in ref4) {
              value = ref4[key];
              if (value.lang === desiredLanguage) {
                scopeNote += value.value + '<br />';
              }
            }
          }
          if (scopeNote) {
            html += '<h4>' + $$('custom.data.type.finto.modal.form.popup.jsonpreview.scopenote') + '</h4>' + scopeNote;
          }
        }
        note = '';
        if (record['skos:note']) {
          if (!Array.isArray(record['skos:note'])) {
            if (record['skos:note'].value) {
              note += record['skos:note'].value + '<br />';
            }
          }
          if (Array.isArray(record['skos:note'])) {
            ref5 = record['skos:note'];
            for (key in ref5) {
              value = ref5[key];
              if (value.lang === desiredLanguage) {
                note += value.value + '<br />';
              }
            }
          }
          if (note) {
            html += '<h4>' + $$('custom.data.type.finto.modal.form.popup.jsonpreview.note') + '</h4>' + note;
          }
        }
        html = '<style>.fintoTooltip { padding: 10px; min-width:200px; }  .fintoTooltip h3 { margin-top: 10px; } .fintoTooltip h4 { margin-top: 14px; margin-bottom: 4px; }</style><div class="fintoTooltip">' + html + '</div>';
      }
    }
    return html;
  };

  FINTOUtilities.getVocNotationFromURI = function(uri) {
    var notation, uriParts;
    uri = decodeURIComponent(uri);
    uri = uri.replace('http://www.yso.fi/onto/', '');
    uriParts = uri.split('/');
    notation = uriParts[0];
    return notation;
  };

  FINTOUtilities.getPrefLabelFromDataResult = function(json, desiredLanguage, frontendLanguages) {
    var key, prefLabel, prefLabelFallback, ref, ref1, tmp, value;
    prefLabelFallback = $$("custom.data.type.finto.modal.form.popup.treeview.nopreflabel");
    if (!json.prefLabel) {
      return prefLabelFallback;
    }
    prefLabel = prefLabelFallback;
    for (key in frontendLanguages) {
      value = frontendLanguages[key];
      tmp = value.split('-');
      tmp = tmp[0];
      frontendLanguages[key] = tmp;
    }
    if (!Array.isArray(json.prefLabel)) {
      if (json.prefLabel.value) {
        return json.prefLabel.value;
      }
    }
    ref = json.prefLabel;
    for (key in ref) {
      value = ref[key];
      if (value.lang === desiredLanguage) {
        return value.value;
      }
    }
    ref1 = json.prefLabel;
    for (key in ref1) {
      value = ref1[key];
      if (frontendLanguages.includes(value.lang)) {
        return value.value;
      }
    }
    if (json.prefLabel[0]) {
      return json.prefLabel[0].value;
    }
    return prefLabel;
  };

  return FINTOUtilities;

})();
// Generated by CoffeeScript 1.12.8
var CustomDataTypeFINTO,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

CustomDataTypeFINTO = (function(superClass) {
  extend(CustomDataTypeFINTO, superClass);

  function CustomDataTypeFINTO() {
    return CustomDataTypeFINTO.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeFINTO.prototype.getFacet = function(opts) {
    opts.field = this;
    return new CustomDataTypeCommonFacet(opts);
  };

  CustomDataTypeFINTO.prototype.getCustomDataTypeName = function() {
    return "custom:base.custom-data-type-finto.finto";
  };

  CustomDataTypeFINTO.prototype.getCustomMaskSettings = function() {
    if (this.ColumnSchema) {
      return this.FieldSchema.custom_settings || {};
    } else {
      return {};
    }
  };

  CustomDataTypeFINTO.prototype.getCustomSchemaSettings = function() {
    if (this.ColumnSchema) {
      return this.ColumnSchema.custom_settings || {};
    } else {
      return {};
    }
  };

  CustomDataTypeFINTO.prototype.name = function(opts) {
    var ref;
    if (opts == null) {
      opts = {};
    }
    if (!this.ColumnSchema) {
      return "noNameSet";
    } else {
      return (ref = this.ColumnSchema) != null ? ref.name : void 0;
    }
  };

  CustomDataTypeFINTO.prototype.getCustomDataTypeNameLocalized = function() {
    return $$("custom.data.type.finto.name");
  };

  CustomDataTypeFINTO.prototype.getVocabularyNameFromDatamodel = function(opts) {
    var ref, vocNotation;
    if (opts == null) {
      opts = {};
    }
    vocNotation = (ref = this.getCustomSchemaSettings().vocabulary_notation) != null ? ref.value : void 0;
    return vocNotation;
  };

  CustomDataTypeFINTO.prototype.getLanguageParameterForRequests = function() {
    var desiredLanguage, language, ref, ref1;
    language = (ref = this.getCustomSchemaSettings()) != null ? (ref1 = ref.lang) != null ? ref1.value : void 0 : void 0;
    if (!language) {
      desiredLanguage = ez5.loca.getLanguage();
      desiredLanguage = desiredLanguage.split('-');
      language = desiredLanguage[0];
    }
    return language;
  };

  CustomDataTypeFINTO.prototype.renderPopupAsTreeview = function() {
    var ref, result;
    result = false;
    if (((ref = this.getCustomMaskSettings().editor_style) != null ? ref.value : void 0) === 'popover_treeview') {
      result = true;
    }
    return result;
  };

  CustomDataTypeFINTO.prototype.getActiveVocabularyName = function(cdata) {
    var ref, that, vocParameter;
    that = this;
    if (cdata.finto_PopoverVocabularySelect && ((ref = that.popover) != null ? ref.isShown() : void 0)) {
      vocParameter = cdata.finto_PopoverVocabularySelect;
    } else {
      vocParameter = that.getVocabularyNameFromDatamodel();
    }
    return vocParameter;
  };

  CustomDataTypeFINTO.prototype.renderSearchInput = function(data, opts) {
    var form, that;
    that = this;
    if (!data[this.name()]) {
      data[this.name()] = {};
    }
    that.callFromExpertSearch = true;
    form = this.renderEditorInput(data, '', {});
    CUI.Events.listen({
      type: "data-changed",
      node: form,
      call: (function(_this) {
        return function() {
          CUI.Events.trigger({
            type: "search-input-change",
            node: form
          });
          CUI.Events.trigger({
            type: "editor-changed",
            node: form
          });
          CUI.Events.trigger({
            type: "change",
            node: form
          });
          return CUI.Events.trigger({
            type: "input",
            node: form
          });
        };
      })(this)
    });
    return form.DOM;
  };

  CustomDataTypeFINTO.prototype.needsDirectRender = function() {
    return true;
  };

  CustomDataTypeFINTO.prototype.getSearchFilter = function(data, key) {
    var filter, objecttype, ref, ref1, ref2, ref3, that;
    if (key == null) {
      key = this.name();
    }
    that = this;
    objecttype = this.path();
    objecttype = objecttype.split('.');
    objecttype = objecttype[0];
    if (data[key + ":unset"]) {
      filter = {
        type: "in",
        fields: [this.fullName() + ".conceptName"],
        "in": [null]
      };
      filter._unnest = true;
      filter._unset_filter = true;
      return filter;
    }
    if (!that.renderPopupAsTreeview() || !((ref = data[key]) != null ? ref.experthierarchicalsearchmode : void 0)) {
      filter = {
        type: "complex",
        search: [
          {
            type: "in",
            mode: "fulltext",
            bool: "must",
            phrase: false,
            fields: [this.path() + '.' + this.name() + ".conceptURI"]
          }
        ]
      };
      if (!data[this.name()]) {
        filter.search[0]["in"] = [null];
      } else if ((ref1 = data[this.name()]) != null ? ref1.conceptURI : void 0) {
        filter.search[0]["in"] = [data[this.name()].conceptURI];
      } else {
        filter = null;
      }
    }
    if (that.renderPopupAsTreeview()) {
      if (data[key].experthierarchicalsearchmode === 'include_children') {
        filter = {
          type: "complex",
          search: [
            {
              type: "match",
              mode: "token",
              bool: "must",
              phrase: true,
              fields: [this.path() + '.' + this.name() + ".conceptAncestors"]
            }
          ]
        };
        if (!data[this.name()]) {
          filter.search[0].string = null;
        } else if ((ref2 = data[this.name()]) != null ? ref2.conceptURI : void 0) {
          filter.search[0].string = data[this.name()].conceptURI;
        } else {
          filter = null;
        }
      }
      if (data[key].experthierarchicalsearchmode === 'exact') {
        filter = {
          type: "complex",
          search: [
            {
              type: "in",
              mode: "fulltext",
              bool: "must",
              phrase: true,
              fields: [this.path() + '.' + this.name() + ".conceptURI"]
            }
          ]
        };
        if (!data[this.name()]) {
          filter.search[0]["in"] = [null];
        } else if ((ref3 = data[this.name()]) != null ? ref3.conceptURI : void 0) {
          filter.search[0]["in"] = [data[this.name()].conceptURI];
        } else {
          filter = null;
        }
      }
    }
    return filter;
  };

  CustomDataTypeFINTO.prototype.getQueryFieldBadge = function(data) {
    var ref, ref1, ref2, searchModeAddition, value;
    if (!data[this.name()]) {
      value = $$("field.search.badge.without");
    } else if (!((ref = data[this.name()]) != null ? ref.conceptURI : void 0)) {
      value = $$("field.search.badge.without");
    } else {
      value = data[this.name()].conceptName;
    }
    if (((ref1 = data[this.name()]) != null ? ref1.experthierarchicalsearchmode : void 0) === 'exact' || ((ref2 = data[this.name()]) != null ? ref2.experthierarchicalsearchmode : void 0) === 'include_children') {
      searchModeAddition = $$("custom.data.type.finto.modal.form.popup.choose_expertsearchmode_." + data[this.name()].experthierarchicalsearchmode + "_short");
      value = searchModeAddition + ': ' + value;
    }
    return {
      name: this.nameLocalized(),
      value: value
    };
  };

  CustomDataTypeFINTO.prototype.__chooseLabelManually = function(cdata, layout, resultJSON, anchor, opts) {
    var button, choiceLabels, chooseLabelContent, chooseLabelPopover, key, prefLabelButtons, ref, ref1, that, value;
    that = this;
    choiceLabels = [];
    ref = resultJSON.prefLabel;
    for (key in ref) {
      value = ref[key];
      choiceLabels.push(value.value);
    }
    ref1 = resultJSON.altLabel;
    for (key in ref1) {
      value = ref1[key];
      choiceLabels.push(value.value);
    }
    prefLabelButtons = [];
    for (key in choiceLabels) {
      value = choiceLabels[key];
      button = new CUI.Button({
        text: value,
        appearance: "flat",
        icon_left: new CUI.Icon({
          "class": "fa-arrow-circle-o-right"
        }),
        "class": 'fintoPlugin_SearchButton',
        onClick: (function(_this) {
          return function(evt, button) {
            cdata.conceptName = button.opts.text;
            cdata.conceptNameChosenByHand = true;
            that.__updateResult(cdata, layout, opts);
            if (that.popover) {
              that.popover.hide();
            }
            if (chooseLabelPopover) {
              chooseLabelPopover.hide();
            }
            return _this;
          };
        })(this)
      });
      prefLabelButtons.push(button);
    }
    chooseLabelPopover = new CUI.Popover({
      element: anchor,
      placement: "wn",
      "class": "commonPlugin_Popover",
      pane: {
        padded: true,
        header_left: new CUI.Label({
          text: $$('custom.data.type.finto.modal.form.popup.choose_manual_label')
        })
      }
    });
    chooseLabelContent = new CUI.VerticalLayout({
      "class": "cui-pane",
      center: {
        content: [prefLabelButtons]
      },
      bottom: null
    });
    chooseLabelPopover.setContent(chooseLabelContent);
    return chooseLabelPopover.show();
  };

  CustomDataTypeFINTO.prototype.__chooseExpertHierarchicalSearchMode = function(cdata, layout, resultJSON, anchor, opts) {
    var ConfirmationDialog, that;
    that = this;
    ConfirmationDialog = new CUI.ConfirmationDialog({
      text: $$('custom.data.type.finto.modal.form.popup.choose_expertsearchmode_label2') + '\n\n' + $$('custom.data.type.finto.modal.form.popup.choose_expertsearchmode_label3') + ': ' + cdata.conceptURI + '\n',
      title: $$('custom.data.type.finto.modal.form.popup.choose_expertsearchmode_label'),
      icon: "question",
      cancel: false,
      buttons: [
        {
          text: $$('custom.data.type.finto.modal.form.popup.choose_expertsearchmode_.exact'),
          onClick: (function(_this) {
            return function() {
              cdata.experthierarchicalsearchmode = 'exact';
              that.__updateResult(cdata, layout, opts);
              return ConfirmationDialog.destroy();
            };
          })(this)
        }, {
          text: $$('custom.data.type.finto.modal.form.popup.choose_expertsearchmode_.include_children'),
          primary: true,
          onClick: (function(_this) {
            return function() {
              cdata.experthierarchicalsearchmode = 'include_children';
              that.__updateResult(cdata, layout, opts);
              return ConfirmationDialog.destroy();
            };
          })(this)
        }
      ]
    });
    return ConfirmationDialog.show();
  };

  CustomDataTypeFINTO.prototype.__updateSuggestionsMenu = function(cdata, cdata_form, finto_searchstring, input, suggest_Menu, searchsuggest_xhr, layout, opts) {
    var delayMillisseconds, itemList, menu_items, that;
    that = this;
    delayMillisseconds = 50;
    menu_items = [
      {
        text: $$('custom.data.type.finto.modal.form.loadingSuggestions'),
        icon_left: new CUI.Icon({
          "class": "fa-spinner fa-spin"
        }),
        disabled: true
      }
    ];
    itemList = {
      items: menu_items
    };
    suggest_Menu.setItemList(itemList);
    return setTimeout((function() {
      var finto_countSuggestions, vocParameter;
      finto_searchstring = finto_searchstring.replace(/^\s+|\s+$/g, "");
      if (finto_searchstring.length === 0) {
        return;
      }
      suggest_Menu.show();
      if (cdata_form) {
        finto_countSuggestions = cdata_form.getFieldsByName("finto_countSuggestions")[0].getValue();
      } else {
        finto_countSuggestions = 10;
      }
      if (searchsuggest_xhr.xhr !== void 0) {
        searchsuggest_xhr.xhr.abort();
      }
      vocParameter = that.getActiveVocabularyName(cdata);
      searchsuggest_xhr.xhr = new CUI.XHR({
        url: location.protocol + '//api.finto.fi/rest/v1/search?query=' + finto_searchstring + '*&vocab=' + vocParameter + '&lang=' + that.getLanguageParameterForRequests() + '&unique=true&maxhits=' + finto_countSuggestions
      });
      return searchsuggest_xhr.xhr.start().done(function(data, status, statusText) {
        var actualVocab, extendedInfo_xhr, fn, item, j, key2, len, multibleVocs, part, record, recordKey, ref, ref1, ref2, showHeadlines, suggestion, tmp_items, unique_text_items, unique_text_suggestions, vocTest, vocTestArr, vocab;
        extendedInfo_xhr = {
          "xhr": void 0
        };
        if (data.results) {
          data = data.results;
        } else {
          data = [];
        }
        showHeadlines = false;
        multibleVocs = false;
        vocTest = that.getVocabularyNameFromDatamodel();
        vocTestArr = vocTest.split(' ');
        if (vocTestArr.length > 1) {
          multibleVocs = true;
        }
        if (!((ref = that.popover) != null ? ref.isShown() : void 0)) {
          if (multibleVocs === false) {
            showHeadlines = false;
          } else {

          }
          if (multibleVocs === true) {
            showHeadlines = true;
          }
        } else if ((ref1 = that.popover) != null ? ref1.isShown() : void 0) {
          if (multibleVocs === true) {
            if ((cdata != null ? cdata.finto_PopoverVocabularySelect : void 0) !== '' && (cdata != null ? cdata.finto_PopoverVocabularySelect : void 0) !== vocTest) {
              showHeadlines = false;
            } else {

            }
            if ((cdata != null ? cdata.finto_PopoverVocabularySelect : void 0) === vocTest) {
              showHeadlines = true;
            }
          } else {
            if (multibleVocs === false) {
              showHeadlines = false;
            }
          }
        }
        actualVocab = '';
        tmp_items = [];
        unique_text_suggestions = [];
        unique_text_items = [];
        fn = function(record) {
          var item;
          item = {
            text: record.prefLabel,
            value: record.uri,
            tooltip: {
              markdown: true,
              placement: "ne",
              content: function(tooltip) {
                var encodedURI;
                encodedURI = encodeURIComponent(record.uri);
                that.__getAdditionalTooltipInfo(encodedURI, tooltip, extendedInfo_xhr);
                return new CUI.Label({
                  icon: "spinner",
                  text: $$('custom.data.type.finto.modal.form.popup.loadingstring')
                });
              }
            }
          };
          tmp_items[vocab].push(item);
          if (indexOf.call(unique_text_suggestions, suggestion) < 0) {
            unique_text_suggestions.push(suggestion);
            item = {
              text: suggestion,
              value: suggestion
            };
            return unique_text_items.push(item);
          }
        };
        for (recordKey in data) {
          record = data[recordKey];
          vocab = 'default';
          if (showHeadlines) {
            vocab = record.vocab;
          }
          if (!Array.isArray(tmp_items[vocab])) {
            tmp_items[vocab] = [];
          }
          fn(record);
        }
        menu_items = [];
        actualVocab = '';
        for (vocab in tmp_items) {
          part = tmp_items[vocab];
          if (showHeadlines) {
            if ((actualVocab === '' || actualVocab !== vocab) && vocab !== 'default') {
              actualVocab = vocab;
              item = {
                divider: true
              };
              menu_items.push(item);
              item = {
                label: actualVocab
              };
              menu_items.push(item);
              item = {
                divider: true
              };
              menu_items.push(item);
            }
          }
          for (key2 = j = 0, len = part.length; j < len; key2 = ++j) {
            suggestion = part[key2];
            menu_items.push(suggestion);
          }
        }
        itemList = {
          onClick: function(ev2, btn) {
            var allDataAPIPath, ancestors, dataEntry_xhr, newLoaderPanel, ref2, searchUri;
            if (!that.renderPopupAsTreeview() || !((ref2 = that.popover) != null ? ref2.isShown() : void 0)) {
              searchUri = btn.getOpt("value");
              if (that.popover) {
                newLoaderPanel = new CUI.Pane({
                  "class": "cui-pane",
                  center: {
                    content: [
                      new CUI.HorizontalLayout({
                        maximize: true,
                        left: null,
                        center: {
                          content: new CUI.Label({
                            centered: true,
                            size: "big",
                            icon: "spinner",
                            text: $$('custom.data.type.finto.modal.form.popup.loadingstring')
                          })
                        },
                        right: null
                      })
                    ]
                  }
                });
                that.popover.setContent(newLoaderPanel);
              }
              ancestors = '';
              if (that.renderPopupAsTreeview()) {
                ancestors = ',ancestors';
              }
              allDataAPIPath = location.protocol + '//api.finto.fi/rest/v1/data?uri=' + encodeURIComponent(searchUri) + '&format=application%2Fjson';
              dataEntry_xhr = new CUI.XHR({
                url: allDataAPIPath
              });
              dataEntry_xhr.start().done(function(resultJSON, status, statusText) {
                var allHierarchyAPIPath, dataHierarchy_xhr;
                allHierarchyAPIPath = location.protocol + '//api.finto.fi/rest/v1/' + FINTOUtilities.getVocNotationFromURI(searchUri) + '/hierarchy?uri=' + encodeURIComponent(searchUri) + '&lang=' + that.getLanguageParameterForRequests() + '&format=application%2Fjson';
                dataHierarchy_xhr = new CUI.XHR({
                  url: allHierarchyAPIPath
                });
                return dataHierarchy_xhr.start().done(function(hierarchyJSON, status, statusText) {
                  var anchor, databaseLanguages, desiredLanguage, foundMatchingLabel, frontendLanguages, hierarchyKey, hierarchyValue, i, isnarrower, json, k, l, len1, len2, m, narrower, prefLabelKey, prefLabelValue, ref3, ref4, ref5, ref6, ref7, ref8;
                  hierarchyJSON = hierarchyJSON.broaderTransitive;
                  ref3 = resultJSON.graph;
                  for (k = 0, len1 = ref3.length; k < len1; k++) {
                    json = ref3[k];
                    if (json.uri === searchUri) {
                      resultJSON = json;
                    }
                  }
                  databaseLanguages = ez5.loca.getLanguageControl().getLanguages();
                  frontendLanguages = ez5.session.getConfigFrontendLanguages();
                  desiredLanguage = that.getLanguageParameterForRequests();
                  cdata.conceptName = FINTOUtilities.getPrefLabelFromDataResult(resultJSON, desiredLanguage, frontendLanguages);
                  cdata.conceptURI = resultJSON.uri;
                  cdata.conceptSource = FINTOUtilities.getVocNotationFromURI(resultJSON.uri);
                  cdata._fulltext = FINTOUtilities.getFullTextFromJSONObject(resultJSON, databaseLanguages);
                  cdata._standard = FINTOUtilities.getStandardFromJSONObject(resultJSON, databaseLanguages);
                  cdata.facetTerm = FINTOUtilities.getFacetTermFromJSONObject(resultJSON, databaseLanguages);
                  cdata.frontendLanguage = that.getLanguageParameterForRequests();
                  cdata.conceptAncestors = [];
                  for (i = l = 1, ref4 = Object.keys(hierarchyJSON).length; 1 <= ref4 ? l < ref4 : l > ref4; i = 1 <= ref4 ? ++l : --l) {
                    for (hierarchyKey in hierarchyJSON) {
                      hierarchyValue = hierarchyJSON[hierarchyKey];
                      if (hierarchyKey !== resultJSON.uri) {
                        isnarrower = false;
                        if (hierarchyValue.narrower) {
                          if (!Array.isArray(hierarchyValue.narrower)) {
                            hierarchyValue.narrower = [hierarchyValue.narrower];
                          }
                          ref5 = hierarchyValue.narrower;
                          for (m = 0, len2 = ref5.length; m < len2; m++) {
                            narrower = ref5[m];
                            if (narrower.uri === resultJSON.uri) {
                              if (!cdata.conceptAncestors.includes(hierarchyValue.uri)) {
                                cdata.conceptAncestors.push(hierarchyValue.uri);
                              }
                            } else if (cdata.conceptAncestors.includes(narrower.uri)) {
                              if (!cdata.conceptAncestors.includes(hierarchyValue.uri)) {
                                cdata.conceptAncestors.push(hierarchyValue.uri);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  cdata.conceptAncestors.push(resultJSON.uri);
                  cdata.conceptAncestors = cdata.conceptAncestors.join(' ');
                  if (((ref6 = that.getCustomMaskSettings().allow_label_choice) != null ? ref6.value : void 0) && (opts != null ? opts.mode : void 0) === 'editor') {
                    if (newLoaderPanel) {
                      anchor = newLoaderPanel;
                    } else {
                      anchor = input;
                    }
                    that.__chooseLabelManually(cdata, layout, resultJSON, anchor, opts);
                  } else {
                    foundMatchingLabel = false;
                    if (resultJSON.prefLabel.length > 0) {
                      ref7 = resultJSON.prefLabel;
                      for (prefLabelKey in ref7) {
                        prefLabelValue = ref7[prefLabelKey];
                        if (prefLabelValue.lang === that.getLanguageParameterForRequests()) {
                          cdata.conceptName = prefLabelValue.value;
                          foundMatchingLabel = true;
                        }
                      }
                    }
                    if (!foundMatchingLabel) {
                      cdata.conceptName = resultJSON.prefLabel[Object.keys(resultJSON.prefLabel)[0]].value;
                    }
                    that.__updateResult(cdata, layout, opts);
                    if (that.popover) {
                      that.popover.hide();
                    }
                    this;
                  }
                  if (((ref8 = that._finto_opts) != null ? ref8.callFromExpertSearch : void 0) === true) {
                    return CustomDataTypeFINTO.prototype.__chooseExpertHierarchicalSearchMode(that._cdata, that._editor_layout, resultJSON, that._editor_layout, that._finto_opts);
                  }
                });
              });
            }
            if (that.renderPopupAsTreeview() && that.popover) {
              if (cdata_form) {
                return cdata_form.getFieldsByName("searchbarInput")[0].setValue(btn.getText());
              }
            }
          },
          items: menu_items
        };
        if (that.renderPopupAsTreeview() && ((ref2 = that.popover) != null ? ref2.isShown() : void 0)) {
          itemList.items = unique_text_items;
        }
        if (itemList.items.length === 0) {
          itemList = {
            items: [
              {
                text: $$('custom.data.type.finto.modal.form.popup.suggest.nohit'),
                value: void 0
              }
            ]
          };
        }
        suggest_Menu.setItemList(itemList);
        return suggest_Menu.show();
      });
    }), delayMillisseconds);
  };

  CustomDataTypeFINTO.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var cdata, dropdown, editorStyle, ref, that;
    that = this;
    if (!data[this.name()]) {
      cdata = {
        conceptName: '',
        conceptURI: ''
      };
      data[this.name()] = cdata;
    } else {
      cdata = data[this.name()];
    }
    dropdown = false;
    if (opts != null ? opts.editorstyle : void 0) {
      editorStyle = opts.editorstyle;
    } else {
      if (((ref = this.getCustomMaskSettings().editor_style) != null ? ref.value : void 0) === 'dropdown') {
        editorStyle = 'dropdown';
      } else {
        editorStyle = 'popup';
      }
    }
    if (editorStyle === 'dropdown') {
      return this.__renderEditorInputInline(data, cdata, opts);
    } else {
      return this.__renderEditorInputPopover(data, cdata, opts);
    }
  };

  CustomDataTypeFINTO.prototype.getFrontendLanguage = function() {
    var desiredLanguage, ref;
    desiredLanguage = typeof ez5 !== "undefined" && ez5 !== null ? (ref = ez5.loca) != null ? ref.getLanguage() : void 0 : void 0;
    if (desiredLanguage) {
      desiredLanguage = desiredLanguage.split('-');
      desiredLanguage = desiredLanguage[0];
    } else {
      desiredLanguage = false;
    }
    return desiredLanguage;
  };

  CustomDataTypeFINTO.prototype.__renderEditorInputInline = function(data, cdata, opts) {
    var cdata_form, fields, select, that;
    if (opts == null) {
      opts = {};
    }
    that = this;
    fields = [];
    select = {
      type: CUI.Select,
      undo_and_changed_support: false,
      empty_text: $$('custom.data.type.finto.modal.form.dropdown.loadingentries'),
      options: (function(_this) {
        return function(thisSelect) {
          var dfr, parentParameter, ref, ref1, searchsuggest_xhr, values, voc, vocTest;
          dfr = new CUI.Deferred();
          values = [];
          vocTest = _this.getVocabularyNameFromDatamodel(opts);
          vocTest = vocTest.split('|');
          if (vocTest.length > 1) {
            voc = vocTest[0];
          } else {
            voc = _this.getVocabularyNameFromDatamodel(opts);
          }
          parentParameter = '123';
          if ((ref = that.getCustomSchemaSettings()) != null ? (ref1 = ref.vocabulary_parent) != null ? ref1.value : void 0 : void 0) {
            parentParameter = that.getCustomSchemaSettings().vocabulary_parent.value;
          }
          searchsuggest_xhr = new CUI.XHR({
            url: location.protocol + '//api.finto.fi/rest/v1/' + voc + '/narrowerTransitive?uri=' + parentParameter + '&lang=' + that.getLanguageParameterForRequests()
          });
          searchsuggest_xhr.start().done(function(data, status, statusText) {
            var givenOpt, item, j, key, label, len, select_items, suggestion;
            select_items = [];
            item = {
              text: $$('custom.data.type.finto.modal.form.dropdown.choose'),
              value: null
            };
            select_items.push(item);
            data = data.narrowerTransitive;
            for (key in data) {
              suggestion = data[key];
              label = suggestion.prefLabel;
              if (!label) {
                label = $$('custom.data.type.finto.modal.form.dropdown.nolabelinlanguagefound');
              }
              if (suggestion.uri !== parentParameter) {
                item = {
                  text: label,
                  value: suggestion.uri
                };
                select_items.push(item);
              }
            }
            if ((cdata != null ? cdata.conceptURI : void 0) !== '') {
              for (j = 0, len = select_items.length; j < len; j++) {
                givenOpt = select_items[j];
                if (givenOpt.value !== null) {
                  if (givenOpt.value === (cdata != null ? cdata.conceptURI : void 0)) {
                    thisSelect.setValue(givenOpt.value);
                    thisSelect.setText(givenOpt.text);
                  }
                }
              }
            }
            thisSelect.enable();
            return dfr.resolve(select_items);
          });
          return dfr.promise();
        };
      })(this),
      name: 'finto_InlineSelect'
    };
    fields.push(select);
    if (cdata.length === 0) {
      cdata = {};
    }
    cdata_form = new CUI.Form({
      data: cdata,
      onDataChanged: (function(_this) {
        return function() {
          var allDataAPIPath, dataEntry_xhr, element;
          element = cdata_form.getFieldsByName("finto_InlineSelect")[0];
          cdata.conceptURI = element.getValue();
          element.displayValue();
          cdata.conceptName = element.getText();
          cdata.conceptAncestors = null;
          if (cdata.conceptURI !== null) {
            allDataAPIPath = location.protocol + '//api.finto.fi/rest/v1/data?uri=' + encodeURIComponent(cdata.conceptURI) + '&format=application%2Fjson';
            dataEntry_xhr = new CUI.XHR({
              url: allDataAPIPath
            });
            return dataEntry_xhr.start().done(function(resultJSON, status, statusText) {
              var databaseLanguages, desiredLanguage, frontendLanguages, j, json, len, ref;
              ref = resultJSON.graph;
              for (j = 0, len = ref.length; j < len; j++) {
                json = ref[j];
                if (json.uri === cdata.conceptURI) {
                  resultJSON = json;
                }
              }
              databaseLanguages = ez5.loca.getLanguageControl().getLanguages();
              frontendLanguages = ez5.session.getConfigFrontendLanguages();
              desiredLanguage = that.getLanguageParameterForRequests();
              cdata.conceptName = FINTOUtilities.getPrefLabelFromDataResult(resultJSON, desiredLanguage, frontendLanguages);
              cdata.conceptURI = resultJSON.uri;
              cdata.conceptSource = FINTOUtilities.getVocNotationFromURI(resultJSON.uri);
              cdata._fulltext = FINTOUtilities.getFullTextFromJSONObject(resultJSON, databaseLanguages);
              cdata._standard = FINTOUtilities.getStandardFromJSONObject(resultJSON, databaseLanguages);
              cdata.facetTerm = FINTOUtilities.getFacetTermFromJSONObject(resultJSON, databaseLanguages);
              cdata.frontendLanguage = that.getLanguageParameterForRequests();
              if (!(cdata != null ? cdata.conceptURI : void 0)) {
                cdata = {};
              }
              data[that.name(opts)] = cdata;
              data.lastsaved = Date.now();
              return CUI.Events.trigger({
                node: element,
                type: "editor-changed"
              });
            });
          }
        };
      })(this),
      fields: fields
    }).start();
    cdata_form.getFieldsByName("finto_InlineSelect")[0].disable();
    return cdata_form;
  };

  CustomDataTypeFINTO.prototype.__getAdditionalTooltipInfo = function(uri, tooltip, extendedInfo_xhr, context) {
    var that;
    if (context == null) {
      context = null;
    }
    that = this;
    if (context) {
      that = context;
    }
    if (extendedInfo_xhr.xhr !== void 0) {
      extendedInfo_xhr.xhr.abort();
    }
    extendedInfo_xhr.xhr = new CUI.XHR({
      url: location.protocol + '//api.finto.fi/rest/v1/data?uri=' + uri + '&format=application%2Fjson'
    });
    extendedInfo_xhr.xhr.start().done(function(data, status, statusText) {
      var htmlContent;
      htmlContent = FINTOUtilities.getJSONPreview(data, decodeURIComponent(uri), that.getLanguageParameterForRequests(), ez5.session.getConfigFrontendLanguages());
      tooltip.DOM.innerHTML = htmlContent;
      return tooltip.autoSize();
    });
  };

  CustomDataTypeFINTO.prototype.buildAndSetTreeviewLayout = function(popover, layout, cdata, cdata_form, that, returnDfr, opts) {
    var popoverVocabularySelectTest, treeview, treeviewDfr, treeviewPane, vocParameter;
    if (returnDfr == null) {
      returnDfr = false;
    }
    if (this != null ? this.callFromExpertSearch : void 0) {
      opts.callFromExpertSearch = this.callFromExpertSearch;
    } else {
      opts.callFromExpertSearch = false;
    }
    popoverVocabularySelectTest = cdata_form.getFieldsByName("finto_PopoverVocabularySelect")[0];
    if (popoverVocabularySelectTest != null ? popoverVocabularySelectTest.getValue() : void 0) {
      vocParameter = popoverVocabularySelectTest != null ? popoverVocabularySelectTest.getValue() : void 0;
    } else {
      vocParameter = that.getActiveVocabularyName(cdata);
      vocParameter = vocParameter.split('|');
      vocParameter = vocParameter[0];
    }
    treeview = new FINTO_ListViewTree(popover, layout, cdata, cdata_form, that, opts, vocParameter);
    if (returnDfr === false) {
      treeview.getTopTreeView(vocParameter, 1);
    } else {
      treeviewDfr = treeview.getTopTreeView(vocParameter, 1);
    }
    treeviewPane = new CUI.Pane({
      "class": "cui-pane finto_treeviewPane",
      center: {
        content: [treeview.treeview]
      }
    });
    this.popover.setContent(treeviewPane);
    if (returnDfr === false) {
      return treeview;
    } else {
      return treeviewDfr;
    }
  };

  CustomDataTypeFINTO.prototype.showEditPopover = function(btn, data, cdata, layout, opts) {
    var cdata_form, defaultPane, searchsuggest_xhr, suggest_Menu, that;
    that = this;
    suggest_Menu;
    cdata_form;
    this.popover = new CUI.Popover({
      element: btn,
      placement: "wn",
      "class": "commonPlugin_Popover",
      pane: {
        padded: true,
        header_left: new CUI.Label({
          text: $$('custom.data.type.finto.modal.form.popup.choose')
        }),
        header_right: new CUI.EmptyLabel({
          text: that.getVocabularyNameFromDatamodel(opts)
        })
      },
      onHide: (function(_this) {
        return function() {
          var searchbar, vocDropdown;
          delete cdata.finto_PopoverVocabularySelect;
          vocDropdown = cdata_form.getFieldsByName("finto_PopoverVocabularySelect")[0];
          if (vocDropdown) {
            vocDropdown.reload();
          }
          searchbar = cdata_form.getFieldsByName("searchbarInput")[0];
          if (searchbar) {
            return searchbar.reset();
          }
        };
      })(this)
    });
    searchsuggest_xhr = {
      "xhr": void 0
    };
    cdata_form = new CUI.Form({
      "class": "fintoFormWithPadding",
      data: cdata,
      fields: that.__getEditorFields(cdata),
      onDataChanged: (function(_this) {
        return function(data, elem) {
          that.__updateResult(cdata, layout, opts);
          if (elem.opts.name === 'finto_PopoverVocabularySelect' && that.renderPopupAsTreeview()) {
            _this.buildAndSetTreeviewLayout(_this.popover, layout, cdata, cdata_form, that, false, opts);
          }
          that.__setEditorFieldStatus(cdata, layout);
          if (elem.opts.name === 'searchbarInput' || elem.opts.name === 'finto_PopoverVocabularySelect' || elem.opts.name === 'finto_countSuggestions') {
            return that.__updateSuggestionsMenu(cdata, cdata_form, data.searchbarInput, elem, suggest_Menu, searchsuggest_xhr, layout, opts);
          }
        };
      })(this)
    }).start();
    suggest_Menu = new CUI.Menu({
      element: cdata_form.getFieldsByName("searchbarInput")[0],
      use_element_width_as_min_width: true
    });
    if (that.renderPopupAsTreeview()) {
      this.buildAndSetTreeviewLayout(this.popover, layout, cdata, cdata_form, that, false, opts);
    } else {
      defaultPane = new CUI.Pane({
        "class": "cui-pane",
        center: {
          content: [cdata_form]
        }
      });
      this.popover.setContent(defaultPane);
    }
    return this.popover.show();
  };

  CustomDataTypeFINTO.prototype.__getEditorFields = function(cdata) {
    var fields, maxhits, option, select, splittedVocs, that;
    that = this;
    fields = [];
    splittedVocs = that.getVocabularyNameFromDatamodel();
    splittedVocs = splittedVocs.split(' ');
    if (splittedVocs.length > 1 || splittedVocs === '*') {
      select = {
        type: CUI.Select,
        undo_and_changed_support: false,
        name: 'finto_PopoverVocabularySelect',
        form: {
          label: $$("custom.data.type.finto.modal.form.dropdown.selectvocabularyLabel")
        },
        options: (function(_this) {
          return function(thisSelect) {
            var dfr, searchsuggest_xhr, values;
            dfr = new CUI.Deferred();
            values = [];
            searchsuggest_xhr = new CUI.XHR({
              url: location.protocol + '//api.finto.fi/rest/v1/vocabularies?lang=' + that.getLanguageParameterForRequests()
            });
            searchsuggest_xhr.start().done(function(data, status, statusText) {
              var entry, item, j, key, len, ref, select_items;
              select_items = [];
              if (!that.renderPopupAsTreeview()) {
                item = {
                  text: $$('custom.data.type.finto.modal.form.dropdown.choosefromvocall'),
                  value: that.getVocabularyNameFromDatamodel()
                };
                select_items.push(item);
              }
              ref = data.vocabularies;
              for (key = j = 0, len = ref.length; j < len; key = ++j) {
                entry = ref[key];
                if (splittedVocs.includes(entry.id)) {
                  item = {
                    text: entry.title,
                    value: entry.id
                  };
                  select_items.push(item);
                }
              }
              thisSelect.enable();
              return dfr.resolve(select_items);
            });
            return dfr.promise();
          };
        })(this)
      };
      fields.push(select);
    }
    maxhits = {
      type: CUI.Select,
      "class": "commonPlugin_Select",
      name: 'finto_countSuggestions',
      undo_and_changed_support: false,
      form: {
        label: $$('custom.data.type.finto.modal.form.text.count')
      },
      options: [
        {
          value: 10,
          text: '10 ' + $$('custom.data.type.finto.modal.form.text.count_short')
        }, {
          value: 20,
          text: '20 ' + $$('custom.data.type.finto.modal.form.text.count_short')
        }, {
          value: 50,
          text: '50 ' + $$('custom.data.type.finto.modal.form.text.count_short')
        }, {
          value: 100,
          text: '100 ' + $$('custom.data.type.finto.modal.form.text.count_short')
        }
      ]
    };
    fields.push(maxhits);
    option = {
      type: CUI.Input,
      "class": "commonPlugin_Input",
      undo_and_changed_support: false,
      form: {
        label: $$("custom.data.type.finto.modal.form.text.searchbar")
      },
      placeholder: $$("custom.data.type.finto.modal.form.text.searchbar.placeholder"),
      name: "searchbarInput"
    };
    fields.push(option);
    return fields;
  };

  CustomDataTypeFINTO.prototype.__renderButtonByData = function(cdata) {
    var encodedURI, extendedInfo_xhr, that;
    that = this;
    switch (this.getDataStatus(cdata)) {
      case "empty":
        return new CUI.EmptyLabel({
          text: $$("custom.data.type.finto.edit.no_finto")
        }).DOM;
      case "invalid":
        return new CUI.EmptyLabel({
          text: $$("custom.data.type.finto.edit.no_valid_finto")
        }).DOM;
    }
    extendedInfo_xhr = {
      "xhr": void 0
    };
    encodedURI = encodeURIComponent(cdata.conceptURI);
    return new CUI.HorizontalLayout({
      maximize: true,
      left: {
        content: new CUI.Label({
          centered: false,
          text: cdata.conceptName
        })
      },
      center: {
        content: new CUI.ButtonHref({
          name: "outputButtonHref",
          "class": "pluginResultButton",
          appearance: "link",
          size: "normal",
          href: 'https://uri.gbv.de/terminology/?uri=' + encodedURI,
          target: "_blank",
          "class": "cdt_finto_smallMarginTop",
          tooltip: {
            markdown: true,
            placement: 'nw',
            content: function(tooltip) {
              that.__getAdditionalTooltipInfo(encodedURI, tooltip, extendedInfo_xhr);
              return new CUI.Label({
                icon: "spinner",
                text: $$('custom.data.type.finto.modal.form.popup.loadingstring')
              });
            }
          }
        })
      },
      right: null
    }).DOM;
  };

  CustomDataTypeFINTO.prototype.getCustomDataOptionsInDatamodelInfo = function(custom_settings) {
    var ref, ref1, ref2, tags;
    tags = [];
    if ((ref = custom_settings.vocabulary_notation) != null ? ref.value : void 0) {
      tags.push($$("custom.data.type.finto.name") + ': ' + custom_settings.vocabulary_notation.value);
    } else {
      tags.push($$("custom.data.type.finto.setting.schema.no_vocabulary_notation"));
    }
    if ((ref1 = custom_settings.vocabulary_parent) != null ? ref1.value : void 0) {
      tags.push($$("custom.data.type.finto.parent.name") + ': ' + custom_settings.vocabulary_parent.value);
    } else {
      tags.push($$("custom.data.type.finto.setting.schema.vocabulary_parent"));
    }
    if ((ref2 = custom_settings.lang) != null ? ref2.value : void 0) {
      tags.push($$("custom.data.type.finto.language.name") + ': ' + custom_settings.lang.value);
    } else {
      tags.push($$("custom.data.type.finto.setting.schema.lang"));
    }
    return tags;
  };

  return CustomDataTypeFINTO;

})(CustomDataTypeWithCommons);

CustomDataType.register(CustomDataTypeFINTO);
// Generated by CoffeeScript 1.12.8
var CustomDataTypeFINTOFacet,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CustomDataTypeFINTOFacet = (function(superClass) {
  extend(CustomDataTypeFINTOFacet, superClass);

  function CustomDataTypeFINTOFacet() {
    return CustomDataTypeFINTOFacet.__super__.constructor.apply(this, arguments);
  }

  CustomDataTypeFINTOFacet.prototype.initOpts = function() {
    CustomDataTypeFINTOFacet.__super__.initOpts.call(this);
    return this.addOpts({
      field: {
        mandatory: true,
        check: Field
      }
    });
  };

  CustomDataTypeFINTOFacet.prototype.requestFacetWithLimit = function(obj) {
    return {
      limit: this.getLimit(),
      field: this._field.fullName() + ".facetTerm",
      sort: "count",
      type: "term"
    };
  };

  CustomDataTypeFINTOFacet.prototype.getObjects = function(key, data) {
    var ref;
    if (key == null) {
      key = this.name();
    }
    if (data == null) {
      data = this.data();
    }
    return ((ref = data[key]) != null ? ref.terms : void 0) || [];
  };

  CustomDataTypeFINTOFacet.prototype.renderObjectText = function(object) {
    var label, parts;
    parts = object.term.split('@$@');
    label = '---';
    if (parts.length === 2) {
      if (parts[0] !== '') {
        label = parts[0];
      }
    }
    return label;
  };

  CustomDataTypeFINTOFacet.prototype.getObjectPath = function(obj) {
    return [obj.term];
  };

  CustomDataTypeFINTOFacet.prototype.name = function() {
    return this._field.fullName() + ".facetTerm";
  };

  CustomDataTypeFINTOFacet.prototype.requestSearchFilter = function(obj) {
    return {
      bool: "must",
      fields: [this._field.fullName() + ".facetTerm"],
      type: "in",
      "in": [obj.term]
    };
  };

  return CustomDataTypeFINTOFacet;

})(FieldFacet);
// Generated by CoffeeScript 1.12.8
var FINTO_ListViewTree, FINTO_ListViewTreeNode,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FINTO_ListViewTree = (function() {
  function FINTO_ListViewTree(popover, editor_layout, cdata, cdata_form, context, finto_opts, vocParameter) {
    var column, options, row, that, treeview;
    this.popover = popover != null ? popover : null;
    this.editor_layout = editor_layout != null ? editor_layout : null;
    this.cdata = cdata != null ? cdata : null;
    this.cdata_form = cdata_form != null ? cdata_form : null;
    this.context = context != null ? context : null;
    this.finto_opts = finto_opts != null ? finto_opts : {};
    this.vocParameter = vocParameter != null ? vocParameter : 'yso';
    options = {
      "class": "fintoPlugin_Treeview",
      cols: ["maximize", "auto"],
      fixedRows: 0,
      fixedCols: 0,
      no_hierarchy: false
    };
    that = this;
    treeview = new CUI.ListViewTree(options);
    treeview.render();
    treeview.root.open();
    row = new CUI.ListViewRow();
    column = new CUI.ListViewColumn({
      colspan: 2,
      element: new CUI.Label({
        icon: "spinner",
        appearance: "title",
        text: $$("custom.data.type.finto.modal.form.popup.loadingstringtreeview")
      })
    });
    row.addColumn(column);
    treeview.appendRow(row);
    treeview.root.open();
    this.treeview = treeview;
    this.treeview;
  }

  FINTO_ListViewTree.prototype.getTopTreeView = function(vocName) {
    var dfr, that, topTree_xhr, url;
    dfr = new CUI.Deferred();
    that = this;
    topTree_xhr = {
      "xhr": void 0
    };
    url = location.protocol + '//api.finto.fi/rest/v1/' + vocName + '/topConcepts?lang=' + CustomDataTypeFINTO.prototype.getLanguageParameterForRequests();
    topTree_xhr.xhr = new CUI.XHR({
      url: url
    });
    topTree_xhr.xhr.start().done(function(data, status, statusText) {
      var hasNarrowers, j, json, key, len, newNode, prefLabel, ref;
      if (that.treeview.getRow(0)) {
        that.treeview.removeRow(0);
      }
      ref = data.topconcepts;
      for (key = j = 0, len = ref.length; j < len; key = ++j) {
        json = ref[key];
        prefLabel = json.label;
        if (json.hasChildren === true) {
          hasNarrowers = true;
        } else {
          hasNarrowers = false;
        }
        newNode = new FINTO_ListViewTreeNode({
          selectable: false,
          prefLabel: prefLabel,
          uri: json.uri,
          hasNarrowers: hasNarrowers,
          popover: that.popover,
          cdata: that.cdata,
          cdata_form: that.cdata_form,
          guideTerm: FINTO_ListViewTreeNode.prototype.isGuideTerm(json),
          context: that.context,
          vocParameter: that.vocParameter,
          finto_opts: that.finto_opts,
          editor_layout: that.editor_layout
        });
        that.treeview.addNode(newNode);
      }
      CUI.Events.trigger({
        node: that.popover,
        type: "content-resize"
      });
      dfr.resolve();
      return dfr.promise();
    });
    return dfr;
  };

  return FINTO_ListViewTree;

})();

FINTO_ListViewTreeNode = (function(superClass) {
  var prefLabel, uri;

  extend(FINTO_ListViewTreeNode, superClass);

  function FINTO_ListViewTreeNode() {
    this.renderContent = bind(this.renderContent, this);
    this.isLeaf = bind(this.isLeaf, this);
    this.getChildren = bind(this.getChildren, this);
    this.isGuideTerm = bind(this.isGuideTerm, this);
    return FINTO_ListViewTreeNode.__super__.constructor.apply(this, arguments);
  }

  prefLabel = '';

  uri = '';

  FINTO_ListViewTreeNode.prototype.initOpts = function() {
    FINTO_ListViewTreeNode.__super__.initOpts.call(this);
    return this.addOpts({
      prefLabel: {
        check: String
      },
      uri: {
        check: String
      },
      vocParameter: {
        check: String
      },
      children: {
        check: Array
      },
      guideTerm: {
        check: Boolean,
        "default": false
      },
      hasNarrowers: {
        check: Boolean,
        "default": false
      },
      popover: {
        check: CUI.Popover
      },
      cdata: {
        check: "PlainObject",
        "default": {}
      },
      cdata_form: {
        check: CUI.Form
      },
      context: {
        check: CustomDataTypeFINTO
      },
      finto_opts: {
        check: "PlainObject",
        "default": {}
      },
      editor_layout: {
        check: CUI.HorizontalLayout
      }
    });
  };

  FINTO_ListViewTreeNode.prototype.readOpts = function() {
    return FINTO_ListViewTreeNode.__super__.readOpts.call(this);
  };

  FINTO_ListViewTreeNode.prototype.isGuideTerm = function(json) {
    return false;
  };

  FINTO_ListViewTreeNode.prototype.getChildren = function() {
    var children, dfr, getChildren_xhr, that, url;
    that = this;
    dfr = new CUI.Deferred();
    children = [];
    url = location.protocol + '//api.finto.fi/rest/v1/' + this._vocParameter + '/children?uri=' + this._uri + '&lang=' + CustomDataTypeFINTO.prototype.getLanguageParameterForRequests();
    getChildren_xhr = {
      "xhr": void 0
    };
    getChildren_xhr.xhr = new CUI.XHR({
      url: url
    });
    getChildren_xhr.xhr.start().done(function(data, status, statusText) {
      var hasNarrowers, j, json, key, len, newNode;
      data = data.narrower;
      for (key = j = 0, len = data.length; j < len; key = ++j) {
        json = data[key];
        prefLabel = json.prefLabel;
        if (json.hasChildren === true) {
          hasNarrowers = true;
        } else {
          hasNarrowers = false;
        }
        newNode = new FINTO_ListViewTreeNode({
          selectable: false,
          prefLabel: prefLabel,
          uri: json.uri,
          vocParameter: that._vocParameter,
          hasNarrowers: hasNarrowers,
          popover: that._popover,
          cdata: that._cdata,
          cdata_form: that._cdata_form,
          guideTerm: that.isGuideTerm(json),
          context: that._context,
          finto_opts: that._finto_opts,
          editor_layout: that._editor_layout
        });
        children.push(newNode);
      }
      return dfr.resolve(children);
    });
    return dfr.promise();
  };

  FINTO_ListViewTreeNode.prototype.isLeaf = function() {
    if (this.opts.hasNarrowers === true) {
      return false;
    } else {
      return true;
    }
  };

  FINTO_ListViewTreeNode.prototype.renderContent = function() {
    var buttonBar, buttons, d, extendedInfo_xhr, icon, infoButton, plusButton, that, tooltipText;
    that = this;
    extendedInfo_xhr = {
      "xhr": void 0
    };
    d = CUI.dom.div();
    buttons = [];
    icon = 'fa-plus-circle';
    tooltipText = $$('custom.data.type.finto.modal.form.popup.add_choose');
    if (that._guideTerm) {
      icon = 'fa-sitemap';
      tooltipText = $$('custom.data.type.finto.modal.form.popup.add_sitemap');
    }
    plusButton = new CUI.Button({
      text: "",
      icon_left: new CUI.Icon({
        "class": icon
      }),
      active: false,
      group: "default",
      tooltip: {
        text: tooltipText
      },
      onClick: (function(_this) {
        return function() {
          var allDataAPIPath, dataEntry_xhr;
          allDataAPIPath = location.protocol + '//api.finto.fi/rest/v1/data?uri=' + that._uri + '&format=application%2Fjson';
          dataEntry_xhr = new CUI.XHR({
            url: allDataAPIPath
          });
          return dataEntry_xhr.start().done(function(resultJSON, status, statusText) {
            var allHierarchyAPIPath, dataHierarchy_xhr;
            allHierarchyAPIPath = location.protocol + '//api.finto.fi/rest/v1/' + FINTOUtilities.getVocNotationFromURI(that._uri) + '/hierarchy?uri=' + that._uri + '&lang=' + CustomDataTypeFINTO.prototype.getLanguageParameterForRequests() + '&format=application%2Fjson';
            dataHierarchy_xhr = new CUI.XHR({
              url: allHierarchyAPIPath
            });
            return dataHierarchy_xhr.start().done(function(hierarchyJSON, status, statusText) {
              var databaseLanguages, desiredLanguage, frontendLanguages, hierarchyKey, hierarchyValue, i, isnarrower, j, json, k, l, len, len1, narrower, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;
              hierarchyJSON = hierarchyJSON.broaderTransitive;
              ref = resultJSON.graph;
              for (j = 0, len = ref.length; j < len; j++) {
                json = ref[j];
                if (json.uri === that._uri) {
                  resultJSON = json;
                }
              }
              if (((ref1 = that._context) != null ? (ref2 = ref1.FieldSchema) != null ? (ref3 = ref2.custom_settings) != null ? (ref4 = ref3.allow_label_choice) != null ? ref4.value : void 0 : void 0 : void 0 : void 0) === true && ((ref5 = that._finto_opts) != null ? ref5.mode : void 0) === 'editor') {
                CustomDataTypeFINTO.prototype.__chooseLabelManually(that._cdata, that._editor_layout, resultJSON, that._editor_layout, that._finto_opts);
              }
              databaseLanguages = ez5.loca.getLanguageControl().getLanguages();
              databaseLanguages = ez5.loca.getLanguageControl().getLanguages();
              frontendLanguages = ez5.session.getConfigFrontendLanguages();
              desiredLanguage = CustomDataTypeFINTO.prototype.getLanguageParameterForRequests();
              that._cdata.conceptName = FINTOUtilities.getPrefLabelFromDataResult(resultJSON, desiredLanguage, frontendLanguages);
              that._cdata.conceptURI = resultJSON.uri;
              that._cdata.conceptSource = FINTOUtilities.getVocNotationFromURI(resultJSON.uri);
              that._cdata._fulltext = FINTOUtilities.getFullTextFromJSONObject(resultJSON, databaseLanguages);
              that._cdata._standard = FINTOUtilities.getStandardFromJSONObject(resultJSON, databaseLanguages);
              that._cdata.facetTerm = FINTOUtilities.getFacetTermFromJSONObject(resultJSON, databaseLanguages);
              that._cdata.frontendLanguage = CustomDataTypeFINTO.prototype.getLanguageParameterForRequests();
              that._cdata.conceptAncestors = [];
              for (i = k = 1, ref6 = Object.keys(hierarchyJSON).length; 1 <= ref6 ? k < ref6 : k > ref6; i = 1 <= ref6 ? ++k : --k) {
                for (hierarchyKey in hierarchyJSON) {
                  hierarchyValue = hierarchyJSON[hierarchyKey];
                  if (hierarchyKey !== resultJSON.uri) {
                    isnarrower = false;
                    if (hierarchyValue.narrower) {
                      if (!Array.isArray(hierarchyValue.narrower)) {
                        hierarchyValue.narrower = [hierarchyValue.narrower];
                      }
                      ref7 = hierarchyValue.narrower;
                      for (l = 0, len1 = ref7.length; l < len1; l++) {
                        narrower = ref7[l];
                        if (narrower.uri === resultJSON.uri) {
                          if (!that._cdata.conceptAncestors.includes(hierarchyValue.uri)) {
                            that._cdata.conceptAncestors.push(hierarchyValue.uri);
                          }
                        } else if (that._cdata.conceptAncestors.includes(narrower.uri)) {
                          if (!that._cdata.conceptAncestors.includes(hierarchyValue.uri)) {
                            that._cdata.conceptAncestors.push(hierarchyValue.uri);
                          }
                        }
                      }
                    }
                  }
                }
              }
              that._cdata.conceptAncestors.push(resultJSON.uri);
              that._cdata.conceptAncestors = that._cdata.conceptAncestors.join(' ');
              if (((ref8 = that._finto_opts) != null ? ref8.callFromExpertSearch : void 0) === true) {
                CustomDataTypeFINTO.prototype.__chooseExpertHierarchicalSearchMode(that._cdata, that._editor_layout, resultJSON, that._editor_layout, that._finto_opts);
              }
              CustomDataTypeFINTO.prototype.__updateResult(that._cdata, that._editor_layout, that._finto_opts);
              return that._popover.hide();
            });
          });
        };
      })(this)
    });
    plusButton.setEnabled(!that._guideTerm);
    buttons.push(plusButton);
    infoButton = new CUI.Button({
      text: "",
      icon_left: new CUI.Icon({
        "class": "fa-info-circle"
      }),
      active: false,
      group: "default",
      tooltip: {
        markdown: true,
        placement: "e",
        content: function(tooltip) {
          CustomDataTypeFINTO.prototype.__getAdditionalTooltipInfo(that._uri, tooltip, extendedInfo_xhr, that._context);
          return new CUI.Label({
            icon: "spinner",
            text: $$('custom.data.type.finto.modal.form.popup.loadingstring')
          });
        }
      }
    });
    buttons.push(infoButton);
    buttonBar = new CUI.Buttonbar({
      buttons: buttons
    });
    CUI.dom.append(d, CUI.dom.append(CUI.dom.div(), buttonBar.DOM));
    this.addColumn(new CUI.ListViewColumn({
      element: d,
      colspan: 1
    }));
    CUI.Events.trigger({
      node: that._popover,
      type: "content-resize"
    });
    return new CUI.Label({
      text: this._prefLabel
    });
  };

  return FINTO_ListViewTreeNode;

})(CUI.ListViewTreeNode);
